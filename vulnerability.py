# vulnerability.py
import os
import csv
from flask import Blueprint, render_template, request, redirect, url_for, flash, current_app
from extensions import mongo

vuln_bp = Blueprint("vuln_bp", __name__)

def calc_probability(cvss, epss):
    try:
        p = 1 - (1 - (float(cvss) / 10)) * (1 - float(epss))
    except Exception:
        p = 0.0
    return round(p, 3)

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() == 'csv'

@vuln_bp.route('/list')
def list_vulnerabilities():
    vulns = list(mongo.db.vulnerabilities.find({}))
    return render_template("vulnerability_list.html", vulnerabilities=vulns)

@vuln_bp.route('/add', methods=["GET"])
def add_vulnerability_page():
    devices = list(mongo.db.devices.find({}))
    return render_template("vulnerability_add_or_upload.html", devices=devices)

@vuln_bp.route('/add/manual', methods=["POST"])
def add_vulnerability_manual():
    vuln_id = request.form.get("vuln_id")
    desc = request.form.get("desc")
    cvss = request.form.get("cvss")
    epss = request.form.get("epss")
    parent_device_id = request.form.get("parent_device_id")
    prob = calc_probability(cvss, epss)
    mongo.db.vulnerabilities.insert_one({
        "_id": vuln_id,
        "desc": desc,
        "cvss": float(cvss),
        "epss": float(epss),
        "prob": prob,
        "parent_device_id": parent_device_id
    })
    flash("Vulnerability added successfully (manual).", "success")
    return redirect(url_for("vuln_bp.list"))

@vuln_bp.route('/add/upload', methods=["POST"])
def add_vulnerability_upload():
    if 'file' not in request.files:
        flash("No file part.", "danger")
        return redirect(url_for("vuln_bp.add_vulnerability_page"))
    file = request.files['file']
    if file.filename == '':
        flash("No selected file.", "warning")
        return redirect(url_for("vuln_bp.add_vulnerability_page"))
    if file and allowed_file(file.filename):
        from werkzeug.utils import secure_filename
        filename = secure_filename(file.filename)
        filepath = os.path.join(current_app.config["UPLOAD_FOLDER"], filename)
        file.save(filepath)
        count = 0
        with open(filepath, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            for row in reader:
                vuln_id = row.get("vuln_id")
                desc = row.get("desc")
                cvss = row.get("cvss")
                epss = row.get("epss")
                parent_device_id = row.get("parent_device_id")
                if not vuln_id:
                    continue
                prob = calc_probability(cvss, epss)
                mongo.db.vulnerabilities.insert_one({
                    "_id": vuln_id,
                    "desc": desc,
                    "cvss": float(cvss),
                    "epss": float(epss),
                    "prob": prob,
                    "parent_device_id": parent_device_id
                })
                count += 1
        flash(f"{count} vulnerabilities uploaded successfully.", "success")
        return redirect(url_for("vuln_bp.list"))
    else:
        flash("Invalid file format. Only CSV allowed.", "danger")
        return redirect(url_for("vuln_bp.add_vulnerability_page"))

@vuln_bp.route('/edit/<vuln_id>', methods=["GET", "POST"])
def edit_vulnerability(vuln_id):
    vuln = mongo.db.vulnerabilities.find_one({"_id": vuln_id})
    if not vuln:
        flash("Vulnerability not found.", "danger")
        return redirect(url_for("vuln_bp.list"))
    if request.method == "POST":
        desc = request.form.get("desc")
        cvss = request.form.get("cvss")
        epss = request.form.get("epss")
        parent_device_id = request.form.get("parent_device_id")
        prob = calc_probability(cvss, epss)
        mongo.db.vulnerabilities.update_one({"_id": vuln_id}, {"$set": {
            "desc": desc,
            "cvss": float(cvss),
            "epss": float(epss),
            "prob": prob,
            "parent_device_id": parent_device_id
        }})
        flash("Vulnerability updated successfully.", "success")
        return redirect(url_for("vuln_bp.list"))
    devices = list(mongo.db.devices.find({}))
    return render_template("vulnerability_edit.html", vulnerability=vuln, devices=devices)

@vuln_bp.route('/delete/<vuln_id>')
def delete_vulnerability(vuln_id):
    mongo.db.vulnerabilities.delete_one({"_id": vuln_id})
    flash("Vulnerability deleted.", "info")
    return redirect(url_for("vuln_bp.list"))
