# vulnerability.py

import os
import csv
from flask import Blueprint, render_template, request, redirect, url_for, flash, current_app
from bson import ObjectId
from werkzeug.utils import secure_filename
from extensions import mongo

vuln_bp = Blueprint("vuln_bp", __name__)

@vuln_bp.route('/')
def vuln_list():
    """vulnerability list."""
    collection = mongo.db.vulnerabilities
    all_vulns = list(collection.find())
    return render_template('vuln_list.html', vulns=all_vulns)

@vuln_bp.route('/add', methods=['GET'])
def vuln_add_page():
    """
    templates/vuln_add_or_upload.html
    """
    return render_template('vuln_add_or_upload.html')

@vuln_bp.route('/add/manual', methods=['POST'])
def vuln_add_manual():
    collection = mongo.db.vulnerabilities

    ip_address = request.form.get('ip_address', '')
    cve_id = request.form.get('cve_id', '')
    description = request.form.get('description', '')
    cvss_str = request.form.get('cvss', '0')
    epss_str = request.form.get('epss', '0')
    severity = request.form.get('severity', '')

    try:
        cvss_val = float(cvss_str)
    except:
        cvss_val = 0.0
    try:
        epss_val = float(epss_str)
    except:
        epss_val = 0.0

    attack_prob = calc_attack_probability(cvss_val, epss_val)

    new_doc = {
        "ip_address": ip_address,
        "cve_id": cve_id,
        "description": description,
        "cvss": cvss_val,
        "epss": epss_val,
        "severity": severity,
        "attack_probability": attack_prob
    }
    collection.insert_one(new_doc)
    flash("new vulnerability information is added", "success")
    return redirect(url_for('vuln_bp.vuln_list'))

@vuln_bp.route('/add/upload', methods=['POST'])
def vuln_add_upload():
    collection = mongo.db.vulnerabilities

    if 'file' not in request.files:
        flash("field 'file' is not detected", "danger")
        return redirect(url_for('vuln_bp.vuln_add_page'))

    file = request.files['file']
    if file.filename == '':
        flash("please select CSV file", "warning")
        return redirect(url_for('vuln_bp.vuln_add_page'))

    if allowed_file(file.filename):
        filename = secure_filename(file.filename)
        save_path = os.path.join(current_app.config['UPLOAD_FOLDER'], filename)
        file.save(save_path)

        count = update_vuln_from_csv(save_path, collection)
        flash(f" {count} vulnerabilities are imported", "success")
        return redirect(url_for('vuln_bp.vuln_list'))
    else:
        flash("only CSV file is supported", "danger")
        return redirect(url_for('vuln_bp.vuln_add_page'))

@vuln_bp.route('/edit/<vuln_id>', methods=['GET','POST'])
def vuln_edit(vuln_id):
    collection = mongo.db.vulnerabilities
    doc = collection.find_one({"_id": ObjectId(vuln_id)})
    if not doc:
        flash("this vulnerability is not found", "danger")
        return redirect(url_for('vuln_bp.vuln_list'))

    if request.method == 'POST':
        ip_address = request.form.get('ip_address', '')
        cve_id = request.form.get('cve_id', '')
        description = request.form.get('description', '')
        cvss_str = request.form.get('cvss', '0')
        epss_str = request.form.get('epss', '0')
        severity = request.form.get('severity', '')

        try:
            cvss_val = float(cvss_str)
        except:
            cvss_val = 0.0
        try:
            epss_val = float(epss_str)
        except:
            epss_val = 0.0

        attack_prob = calc_attack_probability(cvss_val, epss_val)

        collection.update_one(
            {"_id": doc["_id"]},
            {"$set": {
                "ip_address": ip_address,
                "cve_id": cve_id,
                "description": description,
                "cvss": cvss_val,
                "epss": epss_val,
                "severity": severity,
                "attack_probability": attack_prob
            }}
        )
        flash("vulnerability is updated", "success")
        return redirect(url_for('vuln_bp.vuln_list'))

    # GET
    return render_template('vuln_edit.html', vuln=doc)

@vuln_bp.route('/delete/<vuln_id>')
def vuln_delete(vuln_id):
    collection = mongo.db.vulnerabilities
    collection.delete_one({"_id": ObjectId(vuln_id)})
    flash("vulnerability is deleted", "info")
    return redirect(url_for('vuln_bp.vuln_list'))


# ----------------- toolkit function ------------------
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.',1)[1].lower() == 'csv'

def calc_attack_probability(cvss: float, epss: float) -> float:
    cvss_scaled = cvss / 10.0
    prob = 1 - (1 - cvss_scaled)*(1 - epss)
    return round(prob, 3)

def update_vuln_from_csv(csv_file_path, collection):
    updated_count = 0
    with open(csv_file_path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            cve_id = row.get('cve_id','').strip()
            ip_addr = row.get('ip_address','').strip()
            desc = row.get('description','')
            cvss_str = row.get('cvss','0')
            epss_str = row.get('epss','0')
            severity = row.get('severity','')

            try:
                cvss_val = float(cvss_str)
            except:
                cvss_val = 0.0
            try:
                epss_val = float(epss_str)
            except:
                epss_val = 0.0

            if not cve_id:
                continue

            doc = collection.find_one({"cve_id": cve_id})
            prob = calc_attack_probability(cvss_val, epss_val)

            if doc:
                # update
                collection.update_one(
                    {"_id": doc["_id"]},
                    {"$set":{
                        "ip_address": ip_addr,
                        "description": desc,
                        "cvss": cvss_val,
                        "epss": epss_val,
                        "severity": severity,
                        "attack_probability": prob
                    }}
                )
            else:
                # insert
                new_doc = {
                    "ip_address": ip_addr,
                    "cve_id": cve_id,
                    "description": desc,
                    "cvss": cvss_val,
                    "epss": epss_val,
                    "severity": severity,
                    "attack_probability": prob
                }
                collection.insert_one(new_doc)

            updated_count += 1

    return updated_count
